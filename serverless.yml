service: async-file-upload
configValidationMode: error

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  logRetentionInDays: 7
  iam:
    role:
      statements:
        - Effect: Allow
          Action: s3:*
          Resource: '*'

functions:

  scheduleUpload:
    handler: handlers/scheduleUpload.handler
    events:
      - httpApi:
          path: /schedule-upload
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action: states:StartExecution
        Resource: !Ref UploadAsync
      - Effect: Allow
        Action: s3:*
        Resource: '*'
    environment:
      STEP_FUNCTION_UPLOAD_ASYNC_ARN: !Ref UploadAsync
      UPLOAD_BUCKET_NAME: !Ref UploadBucket

  uploadToThirdParty:
    handler: handlers/uploadToThirdParty.handler
  # deleteS3File:
  #   handler: handlers/deleteS3File.handler

stepFunctions:
  stateMachines:
    UploadAsync:
      name: UploadAsync
      definition: 
        StartAt: UploadToThirdParty
        States:
          UploadToThirdParty:
            Type: Task
            Resource: 
              Fn::GetAtt: [uploadToThirdParty, Arn]
            End: true
            Retry:
            - ErrorEquals:
              - States.ALL
              IntervalSeconds: 30
              MaxAttempts: 25
              BackoffRate: 1.4
            Catch: 
            - ErrorEquals:
              - States.ALL
              Next: SQSDeadLetter
          SQSDeadLetter:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage
            Parameters:
              QueueUrl: 
                Ref: DeadLetterQueue
              MessageBody.$: $.input.message
              MessageAttributes:
                FailedFile:
                  DataType: String
                  StringValue: filex
                FailReason:
                  DataType: String
                  StringValue: xyz
            End: true

resources:
  Resources:  
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: DeadLetterQueue-${sls:stage}
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: upload-flaviostutz-${sls:stage}
        AccessControl: Private

    # Outputs:
    #   UploadAsyncArn:
    #     Description: UploadAsync step function Arn
    #     Value:
    #       Ref: UploadAsync
    #   UploadBucketName:
    #     Description: UploadBucket S3 Arn
    #     Value:
    #       Ref: UploadBucket
    #   DeadLetterQueueArn:
    #     Description: DeadLetterQueue Arn
    #     Value:
    #       Ref: DeadLetterQueue

custom:

  # uploadBucket:
  #   Ref: UploadBucket

  esbuild:
    minify: false
    bundle: true
    sourcemap: true
    watch:
      pattern:
        ['**/*.js']
      ignore: ['.serverless/**/*', '.build', '.esbuild']
    packager: npm

plugins:
  - serverless-esbuild
  - serverless-step-functions
  - serverless-iam-roles-per-function
  - serverless-offline
